/**
 * Copyright 2015 multibit.org
 *
 * Licensed under the MIT license (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://opensource.org/licenses/mit-license.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This protobuf defines the MBHD extra data that is stored with payment requests and transactions.
 * (This is in addition to that stored in the wallet protobuf, which is 'owned' by bitcoinj)
 *
 * Author: Jim Burton
 */
 
/* Notes:
 * - To regenerate after editing, run mvn clean package -DupdateProtobuf
 * - Then manually add the following to the top level generated classes:
 * // This class is auto-generated so is exempt from warnings and Findbugs
 * @SuppressWarnings(value="")
 * @SuppressFBWarnings
 */

option java_package = "org.multibit.hd.core.protobuf";
option java_outer_classname = "MBHDPaymentsProtos";

/**
 * A fiat amount, together with exchange details of how it was generated
 */
 message FiatPayment {
   required string amount = 1;       // The fiat amount of the transaction or request.
                                     // Stored as a non localised string e.g. 1234.56
   required string currency = 2;     // The currency code of the fiat amount (e.g. USD)
   optional string exchange = 3;     // The exchange name used in the definition of the fiat amount e.g. "Bitstamp";
   optional string rate = 4;         // The exchange rate used in the definition of the fiat amount (this is the price of 1 BTC in the fiat currency)
                                     // Stored as a non localised string e.g. 1234.56
 }
 
 
/** 
 * A single payment request (as created on the Request bitcoin screen)
 */
message MBHDPaymentRequest {
  required string address = 1;           // The payment request bitcoin address (as per the bitcoin URI spec)
                                         // Each new request has a distinct address so it can be used as a key for Requests
  
  optional string label = 2;             // The label (as per the bitcoin URI spec)
  optional int64 amountBTC = 3;          // The bitcoin amount, in satoshi (as per the bitcoin URI spec)
  optional FiatPayment amount_fiat = 4;  // The fiat equivalent of the bitcoin amount
  optional string note = 5;              // The private note (this is not included on any QRcode)
  optional int64 date = 6;               // The creation datetime (millis since epoch)
}

/** 
 * A single "extra" transaction info (this is data additional to the bitcoinj Transaction)
 */
message TransactionInfo {
  required string hash = 1;                 	  // The transaction hash (i.e. the transaction id as per the wallet Transaction.hash.toString)
                                             	  // The corresponding transaction is expected to be in the wallet.

  // id = 2 was used by request_address - removed
  optional FiatPayment amount_fiat = 3;     	  // The fiat amount of the transaction at the time it was first sent or received.
  optional string note = 4;                 	  // The note added when the transaction is sent
  optional int64 miner_fee = 5;             	  // On a send transaction, the miner fee in satoshi. On any other type of transaction : 0 or missing
  optional int64 client_fee = 6;            	  // On a send transaction, the MultiBit/ client fee in satoshi. On any other type of transaction : 0 or missing
  optional bool sent_by_self = 7 [default = false]; // Whether the transaction was sent by this wallet (=true) or not
}


/**
 * A single BIP70 payment request
 */
message PaymentRequest {
  required string uuid = 1;     // The UUID of the payment request (the BIP70 payment request itself is stored as a binary file in a directory)
  optional string hash = 2;     // The transaction hash (i.e. the transaction id as per the wallet Transaction.hash.toString)
                                // If present the corresponding transaction is expected to be in the wallet.

  optional FiatPayment amount_fiat = 3;  // The fiat equivalent of the bitcoin amount
  optional int64 amountBTC = 4;          // The bitcoin amount, in satoshi (as per the bitcoin URI spec)
  optional string note = 5;              // The memo on the BIP70 payment request
  optional int64 date = 6;               // The creation datetime (millis since epoch)
  optional string identity_display_name = 7; // The identity display name from the PKI data
  optional string trust_status = 8;      // The trust status of the payment
  optional string trust_error_message = 9; // The trust error message
  optional int64 expiration_date = 10;   // The payment request expiration date
}

/**
 * The top level message
 */
message Payments {
  repeated MBHDPaymentRequest mbhd_payment_request = 1;    // Collection of MBHD payment requests
  repeated TransactionInfo transaction_info = 2;           // Collection of transactions
  repeated PaymentRequest payment_request = 4;             // Collection of BIP70 payment requests

  // id=3 was used by last_used_used - removed

  // Next tag: 5
}